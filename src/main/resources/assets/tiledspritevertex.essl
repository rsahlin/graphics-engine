/* Copyright 2015 Richard Sahlin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 /**
 * Fragment shader for tiled sprite renderer
 * @author Richard Sahlin
 */
#version 100

uniform mat4 uMVPMatrix[2];
uniform vec3 uSpriteData; //tex width, tex height, frames per line

attribute vec4 aPosition;
attribute vec4 aTileSprite; //sprite x, sprite y, texture u, texture v
attribute vec4 aTileSprite2;//frame, rotation z, unused, unused

varying vec2 vTexCoord;
mat4 calculateTransformMatrix();

void main() {
    gl_Position = calculateTransformMatrix() * aPosition + (uMVPMatrix[0] * vec4(aTileSprite.x, aTileSprite.y,0.0, 0.0));
    float y = floor(aTileSprite2.x / uSpriteData.z);
    vTexCoord = vec2(aTileSprite.z * uSpriteData.x + 
                     mod(aTileSprite2.x, uSpriteData.z) * uSpriteData.x,
                     aTileSprite.w * uSpriteData.y + y * uSpriteData.y);
}
/**
 * Returns a matrix with z axis rotation set from attribute aTileSprite2.y.
 * @return Matrix with z axis rotation set from aTileSprite2.y
 */
mat4 calculateTransformMatrix(){

    mat4 modelview = mat4(1);

    //Rotate
    float cz = cos(aTileSprite2.y);
    float sz = sin(aTileSprite2.y);

    modelview[0][0]  =  cz;
    modelview[0][1]  =  sz;

    modelview[1][0]  =  -sz;
    modelview[1][1]  = cz;
        
    return uMVPMatrix[0] * modelview;
}