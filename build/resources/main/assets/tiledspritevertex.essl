/* Copyright 2015 Richard Sahlin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 /**
 * Fragment shader for tiled sprite renderer
 * @author Richard Sahlin
 */
#version 100

//Put array declaration after name for GLSL compatibility
uniform mat4 uMVMatrix;
uniform mat4 uProjectionMatrix;
uniform vec3 uTextureData; //tex width, tex height, frames per line
uniform vec2 uScreenSize; //Width and height of screen

attribute vec3 aPosition;
attribute vec2 aUV;
attribute vec3 aTranslate; //sprite x, sprite y, sprite z
attribute vec3 aRotate;
attribute vec2 aScale;
attribute vec2 aFrameData;//frame

varying vec2 vTexCoord;
mat2 calculateTransformMatrix();

precision highp float;

void main() {
    vec4 pos = uMVMatrix * (vec4(aTranslate.x, aTranslate.y, aTranslate.z, 1.0) + vec4(calculateTransformMatrix() * vec2(aPosition), aPosition.z, 0.0));
    gl_Position = uProjectionMatrix * vec4(floor((uScreenSize * vec2(pos) + 0.5)) / uScreenSize, pos.z, pos.w);
    float y = floor(aFrameData.x / uTextureData.z);
    vTexCoord = vec2(aUV.x + 
                     mod(aFrameData.x, uTextureData.z) * uTextureData.x,
                     aUV.y + y * uTextureData.y);
                     
}
/**
 * Returns a matrix with z axis rotation set from attribute aRotate.z, x and y axis scale.
 * @return Matrix with z axis rotation set from aRotate.z, scale from aScale.x + aScale.y
 */
mat2 calculateTransformMatrix(){

    mat2 modelview = mat2(1);

    //Rotate
    float cz = cos(aRotate.z);
    float sz = sin(aRotate.z);

    modelview[1][1]  =  cz * aScale.y;
    modelview[1][0]  =  sz * aScale.y;

    modelview[0][1]  =  -sz * aScale.x;
    modelview[0][0]  = cz * aScale.x;
        
    return modelview;
}